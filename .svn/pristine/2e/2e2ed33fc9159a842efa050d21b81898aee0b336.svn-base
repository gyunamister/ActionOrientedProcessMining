package org.processmining.actionorientedprocessmining.parser;
import org.antlr.v4.runtime.CharStream;
// Generated from CDL.g4 by ANTLR 4.4
import org.antlr.v4.runtime.Lexer;
import org.antlr.v4.runtime.RuntimeMetaData;
import org.antlr.v4.runtime.atn.ATN;
import org.antlr.v4.runtime.atn.ATNDeserializer;
import org.antlr.v4.runtime.atn.LexerATNSimulator;
import org.antlr.v4.runtime.atn.PredictionContextCache;
import org.antlr.v4.runtime.dfa.DFA;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class CDLLexer extends Lexer {
	static { RuntimeMetaData.checkVersion("4.4", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		T__6=1, T__5=2, T__4=3, T__3=4, T__2=5, T__1=6, T__0=7, VARIABLE_NAME=8, 
		STRING=9, NUMBER=10, DEFINE=11, AS=12, FILTER=13, EVALUATE=14, ACQUIRE=15, 
		ASSOCIATE=16, CONTEXT=17, VALIDATE=18, CONDITION=19, CALCULATE=20, ACQUIRED_BY=21, 
		IN=22, LP=23, RP=24, LB=25, RB=26, LSB=27, RSB=28, LTB=29, RTB=30, DQ=31, 
		SEP=32, ASSIGN=33, MAP=34, TILDE=35, NOT=36, AND=37, OR=38, TRUE=39, FALSE=40, 
		OCCUR=41, NEXT=42, EVENTUALLY=43, WS=44;
	public static String[] modeNames = {
		"DEFAULT_MODE"
	};

	public static final String[] tokenNames = {
		"'\\u0000'", "'\\u0001'", "'\\u0002'", "'\\u0003'", "'\\u0004'", "'\\u0005'", 
		"'\\u0006'", "'\\u0007'", "'\b'", "'\t'", "'\n'", "'\\u000B'", "'\f'", 
		"'\r'", "'\\u000E'", "'\\u000F'", "'\\u0010'", "'\\u0011'", "'\\u0012'", 
		"'\\u0013'", "'\\u0014'", "'\\u0015'", "'\\u0016'", "'\\u0017'", "'\\u0018'", 
		"'\\u0019'", "'\\u001A'", "'\\u001B'", "'\\u001C'", "'\\u001D'", "'\\u001E'", 
		"'\\u001F'", "' '", "'!'", "'\"'", "'#'", "'$'", "'%'", "'&'", "'''", 
		"'('", "')'", "'*'", "'+'", "','"
	};
	public static final String[] ruleNames = {
		"T__6", "T__5", "T__4", "T__3", "T__2", "T__1", "T__0", "VARIABLE_NAME", 
		"STRING", "ESC", "UNICODE", "HEX", "NUMBER", "INT", "EXP", "DEFINE", "AS", 
		"FILTER", "EVALUATE", "ACQUIRE", "ASSOCIATE", "CONTEXT", "VALIDATE", "CONDITION", 
		"CALCULATE", "ACQUIRED_BY", "IN", "LP", "RP", "LB", "RB", "LSB", "RSB", 
		"LTB", "RTB", "DQ", "SEP", "ASSIGN", "MAP", "TILDE", "NOT", "AND", "OR", 
		"TRUE", "FALSE", "OCCUR", "NEXT", "EVENTUALLY", "WS"
	};


	public CDLLexer(CharStream input) {
		super(input);
		_interp = new LexerATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	@Override
	public String getGrammarFileName() { return "CDL.g4"; }

	@Override
	public String[] getTokenNames() { return tokenNames; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public String[] getModeNames() { return modeNames; }

	@Override
	public ATN getATN() { return _ATN; }

	public static final String _serializedATN =
		"\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\2.\u016e\b\1\4\2\t"+
		"\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13"+
		"\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22"+
		"\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31\t\31"+
		"\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!"+
		"\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4"+
		",\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\3\2\3\2\3\2\3\2\3"+
		"\2\3\3\3\3\3\3\3\3\3\4\3\4\3\5\3\5\3\5\3\5\3\5\3\6\3\6\3\7\3\7\3\7\3\7"+
		"\3\7\3\b\3\b\3\b\3\b\3\t\3\t\7\t\u0083\n\t\f\t\16\t\u0086\13\t\3\n\3\n"+
		"\3\n\7\n\u008b\n\n\f\n\16\n\u008e\13\n\3\n\3\n\3\13\3\13\3\13\5\13\u0095"+
		"\n\13\3\f\3\f\3\f\3\f\3\f\3\f\3\r\3\r\3\16\5\16\u00a0\n\16\3\16\3\16\3"+
		"\16\6\16\u00a5\n\16\r\16\16\16\u00a6\3\16\5\16\u00aa\n\16\3\16\5\16\u00ad"+
		"\n\16\3\16\5\16\u00b0\n\16\3\17\3\17\3\17\7\17\u00b5\n\17\f\17\16\17\u00b8"+
		"\13\17\5\17\u00ba\n\17\3\20\3\20\5\20\u00be\n\20\3\20\3\20\3\21\3\21\3"+
		"\21\3\21\3\21\3\21\3\21\3\22\3\22\3\22\3\23\3\23\3\23\3\23\3\23\3\23\3"+
		"\23\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\25\3\25\3\25\3\25\3"+
		"\25\3\25\3\25\3\25\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3"+
		"\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\30\3\30\3\30\3\30\3\30\3\30\3"+
		"\30\3\30\3\30\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\32\3"+
		"\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\33\3\33\3\33\3\33\3\33\3"+
		"\33\3\33\3\33\3\33\3\33\3\33\3\33\3\34\3\34\3\34\3\35\3\35\3\36\3\36\3"+
		"\37\3\37\3 \3 \3!\3!\3\"\3\"\3#\3#\3$\3$\3%\3%\3&\3&\3\'\3\'\3(\3(\3)"+
		"\3)\3*\3*\3*\3*\3+\3+\3+\3+\3,\3,\3,\3-\3-\3-\3-\3-\3.\3.\3.\3.\3.\3."+
		"\3/\3/\3/\3/\3/\3/\3\60\3\60\3\60\3\60\3\60\3\61\3\61\3\61\3\61\3\61\3"+
		"\61\3\61\3\61\3\61\3\61\3\61\3\62\6\62\u0169\n\62\r\62\16\62\u016a\3\62"+
		"\3\62\2\2\63\3\3\5\4\7\5\t\6\13\7\r\b\17\t\21\n\23\13\25\2\27\2\31\2\33"+
		"\f\35\2\37\2!\r#\16%\17\'\20)\21+\22-\23/\24\61\25\63\26\65\27\67\309"+
		"\31;\32=\33?\34A\35C\36E\37G I!K\"M#O$Q%S&U\'W(Y)[*]+_,a-c.\3\2\f\4\2"+
		"aac|\5\2\62;aac|\4\2$$^^\n\2$$\61\61^^ddhhppttvv\5\2\62;CHch\3\2\62;\3"+
		"\2\63;\4\2GGgg\4\2--//\5\2\13\f\17\17\"\"\u0175\2\3\3\2\2\2\2\5\3\2\2"+
		"\2\2\7\3\2\2\2\2\t\3\2\2\2\2\13\3\2\2\2\2\r\3\2\2\2\2\17\3\2\2\2\2\21"+
		"\3\2\2\2\2\23\3\2\2\2\2\33\3\2\2\2\2!\3\2\2\2\2#\3\2\2\2\2%\3\2\2\2\2"+
		"\'\3\2\2\2\2)\3\2\2\2\2+\3\2\2\2\2-\3\2\2\2\2/\3\2\2\2\2\61\3\2\2\2\2"+
		"\63\3\2\2\2\2\65\3\2\2\2\2\67\3\2\2\2\29\3\2\2\2\2;\3\2\2\2\2=\3\2\2\2"+
		"\2?\3\2\2\2\2A\3\2\2\2\2C\3\2\2\2\2E\3\2\2\2\2G\3\2\2\2\2I\3\2\2\2\2K"+
		"\3\2\2\2\2M\3\2\2\2\2O\3\2\2\2\2Q\3\2\2\2\2S\3\2\2\2\2U\3\2\2\2\2W\3\2"+
		"\2\2\2Y\3\2\2\2\2[\3\2\2\2\2]\3\2\2\2\2_\3\2\2\2\2a\3\2\2\2\2c\3\2\2\2"+
		"\3e\3\2\2\2\5j\3\2\2\2\7n\3\2\2\2\tp\3\2\2\2\13u\3\2\2\2\rw\3\2\2\2\17"+
		"|\3\2\2\2\21\u0080\3\2\2\2\23\u0087\3\2\2\2\25\u0091\3\2\2\2\27\u0096"+
		"\3\2\2\2\31\u009c\3\2\2\2\33\u00af\3\2\2\2\35\u00b9\3\2\2\2\37\u00bb\3"+
		"\2\2\2!\u00c1\3\2\2\2#\u00c8\3\2\2\2%\u00cb\3\2\2\2\'\u00d2\3\2\2\2)\u00db"+
		"\3\2\2\2+\u00e3\3\2\2\2-\u00ed\3\2\2\2/\u00f5\3\2\2\2\61\u00fe\3\2\2\2"+
		"\63\u0108\3\2\2\2\65\u0112\3\2\2\2\67\u011e\3\2\2\29\u0121\3\2\2\2;\u0123"+
		"\3\2\2\2=\u0125\3\2\2\2?\u0127\3\2\2\2A\u0129\3\2\2\2C\u012b\3\2\2\2E"+
		"\u012d\3\2\2\2G\u012f\3\2\2\2I\u0131\3\2\2\2K\u0133\3\2\2\2M\u0135\3\2"+
		"\2\2O\u0137\3\2\2\2Q\u0139\3\2\2\2S\u013b\3\2\2\2U\u013f\3\2\2\2W\u0143"+
		"\3\2\2\2Y\u0146\3\2\2\2[\u014b\3\2\2\2]\u0151\3\2\2\2_\u0157\3\2\2\2a"+
		"\u015c\3\2\2\2c\u0168\3\2\2\2ef\7q\2\2fg\7o\2\2gh\7c\2\2hi\7r\2\2i\4\3"+
		"\2\2\2jk\7C\2\2kl\7e\2\2lm\7v\2\2m\6\3\2\2\2no\7(\2\2o\b\3\2\2\2pq\7x"+
		"\2\2qr\7o\2\2rs\7c\2\2st\7r\2\2t\n\3\2\2\2uv\7=\2\2v\f\3\2\2\2wx\7R\2"+
		"\2xy\7t\2\2yz\7q\2\2z{\7e\2\2{\16\3\2\2\2|}\7T\2\2}~\7g\2\2~\177\7u\2"+
		"\2\177\20\3\2\2\2\u0080\u0084\t\2\2\2\u0081\u0083\t\3\2\2\u0082\u0081"+
		"\3\2\2\2\u0083\u0086\3\2\2\2\u0084\u0082\3\2\2\2\u0084\u0085\3\2\2\2\u0085"+
		"\22\3\2\2\2\u0086\u0084\3\2\2\2\u0087\u008c\7$\2\2\u0088\u008b\5\25\13"+
		"\2\u0089\u008b\n\4\2\2\u008a\u0088\3\2\2\2\u008a\u0089\3\2\2\2\u008b\u008e"+
		"\3\2\2\2\u008c\u008a\3\2\2\2\u008c\u008d\3\2\2\2\u008d\u008f\3\2\2\2\u008e"+
		"\u008c\3\2\2\2\u008f\u0090\7$\2\2\u0090\24\3\2\2\2\u0091\u0094\7^\2\2"+
		"\u0092\u0095\t\5\2\2\u0093\u0095\5\27\f\2\u0094\u0092\3\2\2\2\u0094\u0093"+
		"\3\2\2\2\u0095\26\3\2\2\2\u0096\u0097\7w\2\2\u0097\u0098\5\31\r\2\u0098"+
		"\u0099\5\31\r\2\u0099\u009a\5\31\r\2\u009a\u009b\5\31\r\2\u009b\30\3\2"+
		"\2\2\u009c\u009d\t\6\2\2\u009d\32\3\2\2\2\u009e\u00a0\7/\2\2\u009f\u009e"+
		"\3\2\2\2\u009f\u00a0\3\2\2\2\u00a0\u00a1\3\2\2\2\u00a1\u00a2\5\35\17\2"+
		"\u00a2\u00a4\7\60\2\2\u00a3\u00a5\t\7\2\2\u00a4\u00a3\3\2\2\2\u00a5\u00a6"+
		"\3\2\2\2\u00a6\u00a4\3\2\2\2\u00a6\u00a7\3\2\2\2\u00a7\u00a9\3\2\2\2\u00a8"+
		"\u00aa\5\37\20\2\u00a9\u00a8\3\2\2\2\u00a9\u00aa\3\2\2\2\u00aa\u00b0\3"+
		"\2\2\2\u00ab\u00ad\7/\2\2\u00ac\u00ab\3\2\2\2\u00ac\u00ad\3\2\2\2\u00ad"+
		"\u00ae\3\2\2\2\u00ae\u00b0\5\35\17\2\u00af\u009f\3\2\2\2\u00af\u00ac\3"+
		"\2\2\2\u00b0\34\3\2\2\2\u00b1\u00ba\7\62\2\2\u00b2\u00b6\t\b\2\2\u00b3"+
		"\u00b5\t\7\2\2\u00b4\u00b3\3\2\2\2\u00b5\u00b8\3\2\2\2\u00b6\u00b4\3\2"+
		"\2\2\u00b6\u00b7\3\2\2\2\u00b7\u00ba\3\2\2\2\u00b8\u00b6\3\2\2\2\u00b9"+
		"\u00b1\3\2\2\2\u00b9\u00b2\3\2\2\2\u00ba\36\3\2\2\2\u00bb\u00bd\t\t\2"+
		"\2\u00bc\u00be\t\n\2\2\u00bd\u00bc\3\2\2\2\u00bd\u00be\3\2\2\2\u00be\u00bf"+
		"\3\2\2\2\u00bf\u00c0\5\35\17\2\u00c0 \3\2\2\2\u00c1\u00c2\7F\2\2\u00c2"+
		"\u00c3\7G\2\2\u00c3\u00c4\7H\2\2\u00c4\u00c5\7K\2\2\u00c5\u00c6\7P\2\2"+
		"\u00c6\u00c7\7G\2\2\u00c7\"\3\2\2\2\u00c8\u00c9\7C\2\2\u00c9\u00ca\7U"+
		"\2\2\u00ca$\3\2\2\2\u00cb\u00cc\7H\2\2\u00cc\u00cd\7K\2\2\u00cd\u00ce"+
		"\7N\2\2\u00ce\u00cf\7V\2\2\u00cf\u00d0\7G\2\2\u00d0\u00d1\7T\2\2\u00d1"+
		"&\3\2\2\2\u00d2\u00d3\7G\2\2\u00d3\u00d4\7X\2\2\u00d4\u00d5\7C\2\2\u00d5"+
		"\u00d6\7N\2\2\u00d6\u00d7\7W\2\2\u00d7\u00d8\7C\2\2\u00d8\u00d9\7V\2\2"+
		"\u00d9\u00da\7G\2\2\u00da(\3\2\2\2\u00db\u00dc\7C\2\2\u00dc\u00dd\7E\2"+
		"\2\u00dd\u00de\7S\2\2\u00de\u00df\7W\2\2\u00df\u00e0\7K\2\2\u00e0\u00e1"+
		"\7T\2\2\u00e1\u00e2\7G\2\2\u00e2*\3\2\2\2\u00e3\u00e4\7C\2\2\u00e4\u00e5"+
		"\7U\2\2\u00e5\u00e6\7U\2\2\u00e6\u00e7\7Q\2\2\u00e7\u00e8\7E\2\2\u00e8"+
		"\u00e9\7K\2\2\u00e9\u00ea\7C\2\2\u00ea\u00eb\7V\2\2\u00eb\u00ec\7G\2\2"+
		"\u00ec,\3\2\2\2\u00ed\u00ee\7E\2\2\u00ee\u00ef\7Q\2\2\u00ef\u00f0\7P\2"+
		"\2\u00f0\u00f1\7V\2\2\u00f1\u00f2\7G\2\2\u00f2\u00f3\7Z\2\2\u00f3\u00f4"+
		"\7V\2\2\u00f4.\3\2\2\2\u00f5\u00f6\7X\2\2\u00f6\u00f7\7C\2\2\u00f7\u00f8"+
		"\7N\2\2\u00f8\u00f9\7K\2\2\u00f9\u00fa\7F\2\2\u00fa\u00fb\7C\2\2\u00fb"+
		"\u00fc\7V\2\2\u00fc\u00fd\7G\2\2\u00fd\60\3\2\2\2\u00fe\u00ff\7E\2\2\u00ff"+
		"\u0100\7Q\2\2\u0100\u0101\7P\2\2\u0101\u0102\7F\2\2\u0102\u0103\7K\2\2"+
		"\u0103\u0104\7V\2\2\u0104\u0105\7K\2\2\u0105\u0106\7Q\2\2\u0106\u0107"+
		"\7P\2\2\u0107\62\3\2\2\2\u0108\u0109\7E\2\2\u0109\u010a\7C\2\2\u010a\u010b"+
		"\7N\2\2\u010b\u010c\7E\2\2\u010c\u010d\7W\2\2\u010d\u010e\7N\2\2\u010e"+
		"\u010f\7C\2\2\u010f\u0110\7V\2\2\u0110\u0111\7G\2\2\u0111\64\3\2\2\2\u0112"+
		"\u0113\7C\2\2\u0113\u0114\7E\2\2\u0114\u0115\7S\2\2\u0115\u0116\7W\2\2"+
		"\u0116\u0117\7K\2\2\u0117\u0118\7T\2\2\u0118\u0119\7G\2\2\u0119\u011a"+
		"\7F\2\2\u011a\u011b\7\"\2\2\u011b\u011c\7D\2\2\u011c\u011d\7[\2\2\u011d"+
		"\66\3\2\2\2\u011e\u011f\7K\2\2\u011f\u0120\7P\2\2\u01208\3\2\2\2\u0121"+
		"\u0122\7*\2\2\u0122:\3\2\2\2\u0123\u0124\7+\2\2\u0124<\3\2\2\2\u0125\u0126"+
		"\7}\2\2\u0126>\3\2\2\2\u0127\u0128\7\177\2\2\u0128@\3\2\2\2\u0129\u012a"+
		"\7]\2\2\u012aB\3\2\2\2\u012b\u012c\7_\2\2\u012cD\3\2\2\2\u012d\u012e\7"+
		">\2\2\u012eF\3\2\2\2\u012f\u0130\7@\2\2\u0130H\3\2\2\2\u0131\u0132\7$"+
		"\2\2\u0132J\3\2\2\2\u0133\u0134\7.\2\2\u0134L\3\2\2\2\u0135\u0136\7?\2"+
		"\2\u0136N\3\2\2\2\u0137\u0138\7<\2\2\u0138P\3\2\2\2\u0139\u013a\7\u0080"+
		"\2\2\u013aR\3\2\2\2\u013b\u013c\7P\2\2\u013c\u013d\7Q\2\2\u013d\u013e"+
		"\7V\2\2\u013eT\3\2\2\2\u013f\u0140\7C\2\2\u0140\u0141\7P\2\2\u0141\u0142"+
		"\7F\2\2\u0142V\3\2\2\2\u0143\u0144\7Q\2\2\u0144\u0145\7T\2\2\u0145X\3"+
		"\2\2\2\u0146\u0147\7V\2\2\u0147\u0148\7T\2\2\u0148\u0149\7W\2\2\u0149"+
		"\u014a\7G\2\2\u014aZ\3\2\2\2\u014b\u014c\7H\2\2\u014c\u014d\7C\2\2\u014d"+
		"\u014e\7N\2\2\u014e\u014f\7U\2\2\u014f\u0150\7G\2\2\u0150\\\3\2\2\2\u0151"+
		"\u0152\7Q\2\2\u0152\u0153\7E\2\2\u0153\u0154\7E\2\2\u0154\u0155\7W\2\2"+
		"\u0155\u0156\7T\2\2\u0156^\3\2\2\2\u0157\u0158\7P\2\2\u0158\u0159\7G\2"+
		"\2\u0159\u015a\7Z\2\2\u015a\u015b\7V\2\2\u015b`\3\2\2\2\u015c\u015d\7"+
		"G\2\2\u015d\u015e\7X\2\2\u015e\u015f\7G\2\2\u015f\u0160\7P\2\2\u0160\u0161"+
		"\7V\2\2\u0161\u0162\7W\2\2\u0162\u0163\7C\2\2\u0163\u0164\7N\2\2\u0164"+
		"\u0165\7N\2\2\u0165\u0166\7[\2\2\u0166b\3\2\2\2\u0167\u0169\t\13\2\2\u0168"+
		"\u0167\3\2\2\2\u0169\u016a\3\2\2\2\u016a\u0168\3\2\2\2\u016a\u016b\3\2"+
		"\2\2\u016b\u016c\3\2\2\2\u016c\u016d\b\62\2\2\u016dd\3\2\2\2\20\2\u0084"+
		"\u008a\u008c\u0094\u009f\u00a6\u00a9\u00ac\u00af\u00b6\u00b9\u00bd\u016a"+
		"\3\b\2\2";
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}